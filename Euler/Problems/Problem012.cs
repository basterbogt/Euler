using System;

namespace Euler.Problems
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. 
    /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    ///     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// 
    /// Let us list the factors of the first seven triangle numbers:
    ///      1: 1
    ///      3: 1,3
    ///      6: 1,2,3,6
    ///     10: 1,2,5,10
    ///     15: 1,3,5,15
    ///     21: 1,3,7,21
    ///     28: 1,2,4,7,14,28
    /// 
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// </summary>
    public class Problem012 : Problem
    {
        private int currentTriangleNumber = 0;


        public override void Calculate()
        {
            int result = 0;
            int maxDivisors = 0;
            while(maxDivisors <= 500)
            {
                result = GetNextTriangleNumberSum();
                maxDivisors = Math.Max(maxDivisors, CalculateDivisors(result));
                PrintTemp(String.Format("{0:000} - {1}", maxDivisors, result));
            }
        }


        private int GetNextTriangleNumberSum()
        {
            currentTriangleNumber++;
            int sum = 0;
            for(int i = 0; i < currentTriangleNumber; i++)
            {
                sum += i;
            }
            return sum;
        }

        private int CalculateDivisors(int x)
        {
            int sum = 0;
            for(int i = 1; i < x; i++)
            {
                if (x % i == 0) sum++;
            }
            return sum;
        }


    }
}
